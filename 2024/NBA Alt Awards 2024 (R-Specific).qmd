---
title: "NBA Alt Awards 2024"
author: "Sumitro Datta"
format: pdf
editor: visual
execute:
  echo: false
  warning: false
  message: false
geometry:
  - top=20mm
  - left=15mm
  - right=15mm
---

```{r load_pkgs, results="hide"}
packages=c("tidyverse",
           "RSelenium",
           "rvest",
           "polite",
           "rJava",
           "tabulizer",
           "janitor", # cleaning variable names
           "ggdark", # dark background plots
           "gt") # table creator
for (pkg in packages){
  if(!require(pkg,character.only = TRUE)){
    install.packages(pkg,repos = "http://cran.us.r-project.org")
  }
}
```

```{r data_load}
current_year=2024

advanced=read_csv("Data/Advanced.csv") %>% 
  filter(season==current_year) %>%
  #if player played for multiple teams in season, only take total row
  mutate(tm=ifelse(tm=="TOT","1TOT",tm)) %>% 
  group_by(player_id,season) %>% arrange(tm) %>% slice(1) %>% 
  mutate(tm=ifelse(tm=="1TOT","TOT",tm)) %>% 
  arrange(season,player) %>% ungroup()
per_game=read_csv("Data/Player Per Game.csv") %>% 
  filter(season==current_year) %>%
  #if player played for multiple teams in season, only take total row
  mutate(tm=ifelse(tm=="TOT","1TOT",tm)) %>% 
  group_by(player_id,season) %>% arrange(tm) %>% slice(1) %>% 
  mutate(tm=ifelse(tm=="1TOT","TOT",tm)) %>% 
  arrange(season,player) %>% ungroup()
totals=read_csv("Data/Player Totals.csv") %>% 
  filter(season==current_year) %>%
  #if player played for multiple teams in season, only take total row
  mutate(tm=ifelse(tm=="TOT","1TOT",tm)) %>% 
  group_by(player_id,season) %>% arrange(tm) %>% slice(1) %>% 
  mutate(tm=ifelse(tm=="1TOT","TOT",tm)) %>% 
  arrange(season,player) %>% ungroup()

team_summaries=read_csv("Data/Team Summaries.csv") %>% 
  filter(season==current_year) 
team_wl=team_summaries %>% mutate(g_total=w+l) %>% 
  rename(tm=abbreviation) %>% select(season,tm,g_total) %>% head(.,-1) %>% 
  add_row(season=current_year,tm="TOT",g_total=mean(.$g_total))
teams=advanced %>% filter(season==current_year,tm != "TOT") %>% 
  distinct(tm) %>% arrange(tm) %>% pull(tm)
play_by_play=read_csv("Data/Player Play by Play.csv") %>% 
  filter(season==current_year)

western_conf=c("DAL","DEN","GSW","HOU","LAC","LAL","MEM",
               "MIN","NOP","OKC","PHO","POR","SAC","SAS",
               "UTA")

teams_w_conf=tibble(tm=teams) %>% 
  mutate(conference=case_when(tm %in% western_conf~"West",
                              TRUE~"East"))

bbref_bow=bow("https://www.basketball-reference.com/",
              user_agent = "Sumitro Datta",force=TRUE,delay = 10)
```

```{r full_pbp_load}
current_year_for_pbp=paste0(current_year-1,"-",str_sub(current_year,-2))
pbp2024=read_csv(paste0("Data/",current_year_for_pbp,"_pbp.csv")) %>% 
  group_by(GAME_ID) %>% 
  fill(c(SCORE,SCOREMARGIN)) %>%
  replace_na(list(SCORE="0 - 0",SCOREMARGIN="TIE")) %>% ungroup() %>% 
  mutate(SCOREMARGIN=if_else(SCOREMARGIN=="TIE",0,as.numeric(SCOREMARGIN))) %>%
  separate(SCORE,sep=" - ",into=c("visitor_score","home_score"),convert = TRUE) %>%
  mutate(clutch=(PERIOD==4 & abs(SCOREMARGIN)<=5) & PCTIMESTRING<= hms::hms(hours=5)|(PERIOD>4)) %>% ungroup()
```

# Awards

## The Real Sixth Man of the Year (presented by Brent Barry)\*

Sixth Man winners if sixth to ninth on team in minutes played, must have played more than 50% of games and started less than 50% of games (credit to KokiriEmerald for the reasoning behind re-implementing the starting criteria)

```{r real_smoy}

smoy_candidates=advanced %>% left_join(.,per_game) %>%
  left_join(.,team_wl) %>% mutate(g_percent=g/g_total,gs_percent=gs/g) %>% 
  filter(g_percent>=0.5,tm != "TOT") %>% 
  filter(!is.na(mp_per_game)) %>% arrange(desc(mp_per_game)) %>% 
  group_by(tm,season) %>% slice(6:9) %>% ungroup() %>%
  filter(gs_percent<=0.5)

smoy_candidates %>% slice_max(vorp,n=5) %>% 
  select(player,tm,g,gs,mp_per_game,vorp) %>% gt()

smoy_candidates %>% slice_max(pts_per_game,n=5) %>% 
  select(player,tm,g,gs,mp_per_game,pts_per_game) %>% gt()
```

## The Deadshot Award (presented by Ray Allen/Reggie Miller)

best qualifying 3 point percentage (Basketball-Reference)

```{r deadshot}
per_game %>% left_join(.,team_wl) %>% 
  filter(x3p_per_game*g>82,x3p_per_game>=1) %>%
  slice_max(x3p_percent,n=5) %>% select(player,tm,x3p_per_game,x3p_percent) %>% 
  gt() %>% fmt_percent(columns=x3p_percent)
```

## The Stormtrooper Award

worst qualifying 2 point percentage (Basketball-Reference)

```{r stormtrooper}
per_game %>% left_join(.,team_wl) %>% 
  filter(fg_per_game*g>=300,fg_per_game>=300/82) %>%
  slice_min(x2p_percent,n=5) %>% select(player,tm,x2p_per_game,x2p_percent) %>% 
  gt() %>% fmt_percent(columns=x2p_percent)
```

## The "If He Dies, He Dies" Award (presented by Tom Thibodeau, sponsored by Ivan Drago)

most minutes played per game (Basketball-Reference) (credit to FurryCrew for the idea)

```{r he_dies_mpg}
per_game %>% left_join(.,team_wl) %>% mutate(g_percent=g/g_total) %>% 
  filter(g_percent>=0.7) %>%
  slice_max(mp_per_game,n=5) %>% select(player,tm,mp_per_game) %>% gt()
```

alternatively: most total minutes played (Basketball-Reference) (credit to FrankEMartindale for the idea)

```{r he_dies_total_mp}
per_game %>% left_join(.,team_wl) %>% 
  mutate(g_percent=g/g_total,total_mp=g*mp_per_game) %>% 
  filter(g_percent>=0.7) %>% slice_max(total_mp,n=5) %>% 
  select(player,tm,total_mp) %>% gt()
```

## The Black Hole Award

most FGAs per assist (credit to Moose4KU for the idea)

```{r black_hole}
field_goals_per_ast=totals %>%
  left_join(.,team_wl) %>% mutate(g_percent=g/g_total) %>% 
  filter(g_percent>=0.5) %>% mutate(fga_per_ast=fga/ast) %>%
  select(player,tm,g,mp,fga,ast,fga_per_ast)

field_goals_per_ast %>%
  slice_max(fga_per_ast,n=5) %>% arrange(desc(fga_per_ast)) %>% gt()
```

## The Hot Potato Award

fewest FGAs per assist (credit to Moose4KU for the idea & ajayod for the name)

```{r hot_potato}
field_goals_per_ast %>%
  slice_min(fga_per_ast,n=5) %>% arrange(fga_per_ast) %>% gt()
```

## The Most Expendable Player Award (sponsored by the National Basketball Referees Association)

highest personal fouls per 36 minutes (credit to PsychoM & BrightGreenLED for the idea)

```{r most_expendable}
totals %>%
  left_join(.,team_wl) %>% mutate(g_percent=g/g_total) %>% 
  filter(g_percent>=0.5,mp/g>=12) %>% 
  mutate(fouls_per_36_minutes=pf/mp*36) %>% 
  select(player,tm,mp,pf,fouls_per_36_minutes) %>%
  slice_max(fouls_per_36_minutes,n=5) %>% gt()
```

## The "Paint Allergy" Award

players with the highest percentage of 3FGA of their total field goal attempts (credit to frosiano for the idea)

```{r paint_allergy}
left_join(advanced,per_game) %>% 
  filter(x3p_per_game*g>82,x3p_per_game>=1) %>%
  slice_max(x3p_ar,n=5) %>%
  select(player,tm,x3p_ar) %>% gt() %>% fmt_percent(columns=x3p_ar)
```

## The Weakest Link award (sponsored by Jack Link's Beef Jerky, presented by the 2015 Atlanta Hawks Starting 5)\*

best 5th starter (must have started 50% of a team's games, team must have at least 3 qualifying players) (credit to memeticengineering for the idea)

```{r weakest_link}
best_worst_starter_candidates=advanced %>% left_join(.,per_game) %>%
  left_join(.,team_wl) %>% mutate(start_percent=gs/g_total) %>%
  filter(start_percent>=0.5,tm !="TOT") %>% 
  mutate(mp_per_game=mp/g,.after="mp") %>% 
  group_by(tm,season) %>%
  filter(n()>2) %>%
  select(player,pos,tm,g_total,gs,mp_per_game,vorp) %>%
  slice_min(vorp) %>%
  ungroup()

best_worst_starter_candidates %>% 
  slice_max(vorp,n=5) %>% 
  select(player,pos,tm,g_total,gs,mp_per_game,vorp) %>% gt()
```

## The "Don't Check the Box Score" Award

teams that most over performed their Pythagorean record (credit to OhTheGrandeur for the idea)

```{r pyth_overperform}
team_summaries %>% mutate(pyth_diff=w-pw) %>% 
  slice_max(pyth_diff,n=3) %>% select(team,w,pw) %>% gt()
```

## The "Dude, Check the Box Score" Award

teams that most under performed their Pythagorean record (credit to OhTheGrandeur for the idea)

```{r pyth_underperform}
team_summaries %>% mutate(pyth_diff=w-pw) %>% 
  slice_min(pyth_diff,n=3) %>% select(team,w,pw) %>% gt()
```

## The "Most Spectacular Self-Destruction" Award

furthest deviation from preseason record over/unders (credit to Hockeyguy928 for the name)

```{r self_destruct}
session=nod(bbref_bow,path=paste0("leagues/NBA_",current_year,
                                  "_preseason_odds.html"))
preseason_odds=scrape(session) %>% 
  html_nodes(xpath='//*[(@id = "NBA_preseason_odds")]') %>% 
  html_table() %>% .[[1]]

preseason_odds %>% clean_names() %>% filter(str_detect(result,"under")) %>%
  mutate(wins=as.numeric(word(result,sep="-")),diff=w_l_o_u-wins) %>% 
  slice_max(diff,n=3) %>% select(-x) %>% gt()
```

## The "[This Game Has Always Been, And Will Always Be, About Buckets](https://www.youtube.com/watch?v=-xYejfYxT4s)" Award

highest points as percentage of counting stats (rebounds, assists, steals, blocks)

```{r all_about_buckets}
pts_as_percent_counting_stats=per_game %>% left_join(.,team_wl) %>% 
  mutate(g_percent=g/g_total) %>% filter(g_percent>=0.7) %>% 
  mutate(pts_as_percent_of_other_stats=pts_per_game/(pts_per_game+trb_per_game+ast_per_game+stl_per_game+blk_per_game))

pts_as_percent_counting_stats %>% 
  slice_max(pts_as_percent_of_other_stats,n=5) %>% 
  select(player,tm,pts_per_game,trb_per_game,ast_per_game,stl_per_game,blk_per_game,pts_as_percent_of_other_stats) %>% 
  gt() %>% fmt_percent(columns=pts_as_percent_of_other_stats) %>%
  cols_label(pts_per_game="PTS",trb_per_game="TRB",ast_per_game="AST",
             stl_per_game="STL",blk_per_game="BLK",
             pts_as_percent_of_other_stats="PTS as % of Other Stats") %>% 
  tab_spanner(label="Per Game",columns=pts_per_game:blk_per_game)

write_csv(pts_as_percent_counting_stats %>% 
            select(player,pts_per_game,trb_per_game,ast_per_game,
                   stl_per_game,blk_per_game,pts_as_percent_of_other_stats),
          "Output Data/Points as Percent of Counting Stats.csv")
```

## The Empty Calorie Stats Award (sponsored by Pop-Tarts)

highest percentile rank within position in usage, descending VORP, descending TS% (credit to eewap for the idea)

```{r empty_stats}
empty_stats_df=advanced %>% 
  left_join(.,team_wl) %>% 
  mutate(g_percent=g/g_total) %>% filter(g_percent>=0.5) %>%
  mutate(pos=word(pos,sep="-")) %>% group_by(pos) %>%
    mutate(ts_rank=percent_rank(desc(ts_percent)),
           usg_rank=percent_rank(usg_percent),
           vorp_rank=percent_rank(desc(vorp)),
           empty_stats=ts_rank+usg_rank+vorp_rank) %>% ungroup()

empty_stats_df %>% 
  slice_max(empty_stats,n=5) %>% 
  select(player,pos,tm,ts_percent,usg_percent,vorp,ts_rank:empty_stats) %>% 
  gt() %>% fmt_percent(columns=c(ts_percent,ts_rank:empty_stats)) %>%
  cols_label(ts_percent="TS %",usg_percent="USG %",
             ts_rank="TS", usg_rank="USG",vorp_rank="VORP") %>%
  tab_spanner(label="Percentile Rank",columns=ts_rank:vorp_rank)

write_csv(empty_stats_df %>% 
            select(player,pos:experience,ts_percent,usg_percent,vorp,ts_rank:empty_stats),"Output Data/Empty Stats.csv")
```

## The "Can't Win With These Cats" Award (sponsored by Scar from The Lion King, presented by Kevin Durant in a fake mustache)\*

highest difference in on/off splits in weighted average with and without best (credit to eewap for the idea and ToparBull for the change from median)

```{r high_on_off}
pbp_filtered=play_by_play %>% filter(tm !="TOT") %>% 
  left_join(.,team_wl) %>% mutate(g_percent=g/g_total) %>% 
  filter(g_percent>=0.5,mp/g>=10) %>%
  group_by(tm) %>% 
  mutate(tm_avg_weight_npm=sum(net_plus_minus_per_100_poss*mp/g)/sum(mp/g)) %>% 
  ungroup()

on_off_leaders=pbp_filtered %>% group_by(tm) %>%
  slice_max(net_plus_minus_per_100_poss) %>% ungroup() %>% 
  select(seas_id:player,tm:mp,net_plus_minus_per_100_poss,
         g_percent,tm_avg_weight_npm)

on_off_avg_wo_leader=pbp_filtered %>% group_by(tm) %>% 
  arrange(desc(net_plus_minus_per_100_poss)) %>%
  slice(-1) %>% 
  summarize(avg_wo_leader=sum(net_plus_minus_per_100_poss*mp/g)/sum(mp/g))

on_off_diff=left_join(on_off_leaders,on_off_avg_wo_leader) %>% 
  mutate(npm_diff=tm_avg_weight_npm-avg_wo_leader)

on_off_diff %>% slice_max(npm_diff,n=5) %>% 
  select(player:npm_diff) %>% select(-g_percent) %>% 
  gt() %>% cols_label(net_plus_minus_per_100_poss="NPM/100 Poss")
```

## The "Anchors Aweigh" Award (presented by Ron Burgundy)\*

biggest difference in on/off splits in weighted average with and without worst

```{r low_on_off}
on_off_trailers=pbp_filtered %>% group_by(tm) %>%
  slice_min(net_plus_minus_per_100_poss) %>% ungroup() %>% 
  select(seas_id:player,tm:mp,net_plus_minus_per_100_poss,
         g_percent,tm_avg_weight_npm)

on_off_avg_wo_trailer=pbp_filtered %>% group_by(tm) %>% 
  arrange(net_plus_minus_per_100_poss) %>%
  slice(-1) %>% 
  summarize(avg_wo_trailer=sum(net_plus_minus_per_100_poss*mp)/sum(mp))

on_off_diff_trail=left_join(on_off_trailers,on_off_avg_wo_trailer) %>% 
  mutate(npm_diff=tm_avg_weight_npm-avg_wo_trailer)

on_off_diff_trail %>% slice_min(npm_diff,n=5) %>% 
  select(player:npm_diff) %>% select(-g_percent) %>% 
  gt() %>% cols_label(net_plus_minus_per_100_poss="NPM/100 Poss")

write_csv(full_join(on_off_diff,on_off_diff_trail) %>% 
            select(season,player:avg_wo_trailer),"Output Data/On-Off Difference With & Without Extreme Player.csv")
```

## The Clutch Line Syndrome Award (presented by Diar DeRozan)

biggest decline from non-clutch FT% to clutch FT% (credit to Necessary_Career_253 for the idea)

```{r clutch_ft_worst}
free_throws=pbp2024 %>% 
  filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_detect(.,"Free Throw")))

clutch_free_throws=free_throws %>% filter(clutch) %>% group_by(PLAYER1_NAME) %>%
  summarize(clutch_fts_attempted=n(),
            clutch_fts_missed=sum(str_detect(VISITORDESCRIPTION,"MISS")|
                                    str_detect(HOMEDESCRIPTION,"MISS"),
                                  na.rm=TRUE),
            clutch_ft_percent=1-clutch_fts_missed/clutch_fts_attempted) %>% 
  ungroup()

non_clutch_free_throws=free_throws %>% filter(!clutch) %>% 
  group_by(PLAYER1_NAME) %>%
  summarize(non_clutch_fts_attempted=n(),
            non_clutch_fts_missed=sum(str_detect(VISITORDESCRIPTION,"MISS")|
                                        str_detect(HOMEDESCRIPTION,"MISS"),
                                      na.rm=TRUE),
            non_clutch_ft_percent=1-non_clutch_fts_missed/non_clutch_fts_attempted) %>% ungroup()

clutch_differential=inner_join(clutch_free_throws,non_clutch_free_throws) %>% 
  mutate(differential=clutch_ft_percent-non_clutch_ft_percent) %>% 
  filter(clutch_fts_attempted>=10)

write_csv(clutch_differential,"Output Data/Clutch Free Throw Differential.csv")

clutch_differential %>% slice_min(differential,n=10) %>% 
  select(PLAYER1_NAME,clutch_ft_percent,non_clutch_ft_percent,differential) %>%
  gt() %>% fmt_percent(columns=-PLAYER1_NAME)
```

## The "Ice, Ice, Baby" Award (sponsored by Hisense)

biggest improvement from non-clutch FT% to clutch FT%

```{r clutch_ft_best}
clutch_differential %>% slice_max(differential,n=10) %>% 
  select(PLAYER1_NAME,clutch_ft_percent,non_clutch_ft_percent,differential) %>%
  gt() %>% fmt_percent(columns=-PLAYER1_NAME)
```

## The No Fly Zone Award (presented by Dikembe Mutumbo)\*

most blocked dunks as the blocking player

```{r no_fly_zone}
misses=pbp2024 %>% 
  filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_starts(.,"MISS")))
missed_dunks=misses %>% 
    filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_detect(.,"Dunk")))
blocked_dunks=missed_dunks %>% 
    filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_detect(.,"BLOCK")))
#as the blocker
blocked_dunks %>% group_by(PLAYER3_NAME) %>% 
  summarize(count=n()) %>% slice_max(count,n=10) %>% gt()
```

## The Rejected for Boarding Award (sponsored by United Airlines)\*

most blocked dunks as the dunking player (credit to Legdrop_soup for the idea and asw7412 for the sponsor)

```{r reject_boarding}
#as the blockee
blocked_dunks %>% group_by(PLAYER1_NAME) %>% 
  summarize(count=n()) %>% slice_max(count,n=10) %>% gt()
```

## The No Time to Taunt Award (presented by Tim Duncan)\*

highest percent of blocks that stayed inbounds & recovered by blocker's team (credit to gibberisle for the idea)

```{r no_time_to_taunt}

pbp2024_w_next_play=pbp2024 %>% 
  group_by(GAME_ID) %>%
  mutate(next_home_play=lead(HOMEDESCRIPTION),
         next_visitor_play=lead(VISITORDESCRIPTION)) %>% ungroup()

blocks=pbp2024_w_next_play %>% 
    filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_detect(.,"BLOCK"))) %>%
  mutate(home_or_visitor_block=if_else(
    str_detect(HOMEDESCRIPTION,"BLOCK"),"home","visitor"))

team_rebounds=pbp2024_w_next_play %>% 
    filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_ends(.,"Rebound")))

blocks_wo_team_rebs=anti_join(blocks,team_rebounds,by=c("GAME_ID","PERIOD","PCTIMESTRING")) %>% 
  mutate(recovered_by_which_team=case_when(
    home_or_visitor_block=="home" & is.na(next_visitor_play)~"own",
    home_or_visitor_block=="visitor" & is.na(next_home_play)~"own",
    TRUE~"other"))

player_blocks=blocks %>% group_by(PLAYER3_NAME) %>% summarize(blocks=n())

player_blocks_wo_team_rebs=blocks_wo_team_rebs %>% 
  group_by(PLAYER3_NAME,recovered_by_which_team) %>% summarize(n=n()) %>%
  pivot_wider(names_from=recovered_by_which_team,values_from=n,values_fill=0)

player_blk_info=left_join(player_blocks,player_blocks_wo_team_rebs) %>%
  mutate(percent_blk_recovered_by_own=own/blocks)

player_blk_info %>% filter(blocks>=40) %>% 
  slice_max(percent_blk_recovered_by_own,n=10) %>% gt() %>%
  fmt_percent(columns=percent_blk_recovered_by_own)
```

## The "Call Game" Award (presented by Paul "No OT Tonight" George)

most game winning points (defined as the first points that eclipsed the losing team's total) (credit to Necessary_Career_253 for the idea & Clownp3nis for the presenter)

```{r game_winners}
game_results=pbp2024 %>% group_by(GAME_ID) %>% 
  summarize(vis_final=max(visitor_score),home_final=max(home_score)) %>% 
  ungroup() %>%
  mutate(winner=if_else(home_final>vis_final,"home","visitor"),
         loser_points=if_else(home_final>vis_final,vis_final,home_final))
game_winning_shots=left_join(pbp2024,game_results) %>%
  filter((winner=="home" & home_score>loser_points)|
           (winner=="visitor" & visitor_score>loser_points)) %>%
  group_by(GAME_ID) %>% slice_min(EVENTNUM) %>% ungroup() %>%
  mutate(shot_value=case_when(
    str_detect(HOMEDESCRIPTION,"Free Throw")~1,
    str_detect(VISITORDESCRIPTION,"Free Throw")~1,
    str_detect(VISITORDESCRIPTION,"3PT")~3,
    str_detect(HOMEDESCRIPTION,"3PT")~3,
    TRUE~2
  )) %>%
  group_by(PLAYER1_NAME) %>% 
  summarize(game_winning_3=sum(shot_value==3),
            game_winning_2=sum(shot_value==2),
            game_winning_ft=sum(shot_value==1),
            game_winning_points=sum(shot_value))

write_csv(game_winning_shots,"Output Data/Game-Winning Shots.csv")

game_winning_shots %>% slice_max(game_winning_points,n=5) %>%
  gt()
```

## The "Fix My Own Mistakes" Award

most shots after rebounding own missed shot (credit to Necessary_Career_253 for the idea)

```{r fix_own_mistake}
pbp2024_w_before_after=pbp2024 %>% 
  group_by(GAME_ID) %>%
  mutate(next_home_play=lead(HOMEDESCRIPTION),
         next_visitor_play=lead(VISITORDESCRIPTION),
         next_player=lead(PLAYER1_ID),
         last_home_play=lag(HOMEDESCRIPTION),
         last_visitor_play=lag(VISITORDESCRIPTION),
         last_player=lag(PLAYER1_ID)) %>% ungroup()

shot_after_own_rebound_miss=pbp2024_w_before_after %>% 
    filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_detect(.,"REBOUND"))) %>%
  filter(PLAYER1_ID==next_player,PLAYER1_ID==last_player) %>%
  filter(str_detect(next_home_play,"PTS")|
           str_detect(next_visitor_play,"PTS")) %>% 
  mutate(shot_value=case_when(
    str_detect(next_home_play,"3PT")~3,
    str_detect(next_visitor_play,"3PT")~3,
    TRUE~2
  )) %>% 
  group_by(PLAYER1_NAME) %>% 
  summarize(fix_with_3=sum(shot_value==3),
            fix_with_2=sum(shot_value==2),
            fixed_shots=n(),
            fixed_points=sum(shot_value))

shot_after_own_rebound_miss %>% slice_max(fixed_points,n=10) %>%
  gt()
```

## The "Oops, I Dunked It Again" Award (sponsored by Britney Spears, presented by Gary Payton & Shawn Kemp)\*

Most prolific alley-oop duo (credit to lactardenthusiast for the idea)

```{r alley_oops}
#get alley oops
alley_oops=pbp2024 %>% 
    filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_detect(.,"Alley")))
#remove missed alley oop attempts
made_alley_oops=alley_oops %>% 
  filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_starts(.,"MISS",negate=TRUE)))
#remove alley oops that have missing 2nd player (self-alley oop or perhaps missing data?)
made_alley_oops_complete=made_alley_oops %>% 
  filter(!is.na(PLAYER2_NAME)) %>% rowwise() %>% 
  mutate(p1=min(PLAYER1_NAME,PLAYER2_NAME),p2=max(PLAYER1_NAME,PLAYER2_NAME)) %>%
  ungroup()

made_alley_oops_complete %>% group_by(p1,p2) %>% 
  summarize(count=n()) %>% ungroup() %>% slice_max(count,n=10) %>% gt()
```

## The "Human Highlight Reel" Award (presented by Dominique Wilkins)\*

players that had the most games with 2+ dunks (credit to frosiano for the idea)

```{r two_plus_dunks}
dunks=pbp2024 %>% 
    filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_detect(.,"Dunk")))
missed_dunks=dunks %>%
    filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_detect(.,"MISS")))
made_dunks=anti_join(dunks,missed_dunks)

made_dunks %>% group_by(GAME_ID,PLAYER1_NAME) %>% summarize(dunks_in_game=n()) %>%
  filter(dunks_in_game>=2) %>% ungroup() %>% group_by(PLAYER1_NAME) %>% 
  summarize(games_w_2plus_dunks=n()) %>% slice_max(games_w_2plus_dunks,n=10) %>% gt()
```

## The Bowling Ball Award (sponsored by [Pete Weber](#0), presented by Glen "Big Baby" Davis)\*

most charges committed (credit to Kdog122025 for the idea)

```{r bowling_ball}
charges=pbp2024 %>% 
    filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_detect(.,"Charge")))

charges %>% group_by(PLAYER1_NAME) %>% 
  summarize(count=n()) %>% ungroup() %>% slice_max(count,n=10) %>% gt()
```

## "The Good Ol' Hockey Game, is the Best Game You Can Name" Award (presented by Dominik Hasek)\*

most goaltends committed (credit to Kdog122025 for the idea)

```{r goaltends}
goaltends=pbp2024 %>% 
    filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_detect(.,"Goaltending")))

goaltends %>% group_by(PLAYER1_NAME) %>% 
  summarize(count=n()) %>% ungroup() %>% slice_max(count,n=10) %>% gt()
```

## "The Thing about Arsenal Is They Always Try to Walk It In" Award (presented by MLS Commissioner Don Garber)\*

most kicked ball violations

```{r kicked_balls}
kicked_balls=pbp2024 %>% 
    filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_detect(.,"Kick")))

kicked_balls %>% group_by(PLAYER1_NAME) %>% 
  summarize(count=n()) %>% ungroup() %>% slice_max(count,n=10) %>% gt()
```

## The "Counting to 3" Award (Sponsored by the National Parks System, presented by Sesame Street's Count von Count)

Player with the most illegal defense/defensive 3-second calls (credit to PsychoM & MrBuckBuck for the idea)

```{r def_3_seconds}
def_3_seconds=pbp2024 %>% 
    filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_detect(.,"3 Second")))

def_3_seconds %>% group_by(PLAYER1_NAME) %>% 
  summarize(count=n()) %>% ungroup() %>% slice_max(count,n=10) %>% gt()
```

## The Most 3-Pt Shooting Fouls Committed Award\*

credit to watchingsongsDL, kingcobweb & An-Indian-In-The-NBA for the idea

```{r 3_pt_fouls_commit}

third_free_throws=pbp2024 %>%
  filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_detect(.,"Free Throw 3 of 3")))

shooting_fouls=pbp2024 %>% 
  filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_detect(.,"S.FOUL")))

fouls_on_missed_threes=inner_join(shooting_fouls,third_free_throws,
                                  by=c('GAME_ID','PERIOD','PCTIMESTRING'))

three_pointers=pbp2024 %>% 
  filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_detect(.,"3PT")))

made_threes=three_pointers %>% 
  filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_starts(.,"MISS",negate=TRUE)))

fouls_on_made_threes=inner_join(shooting_fouls,made_threes,
                                  by=c('GAME_ID','PERIOD','PCTIMESTRING'))

fouls_on_threes=fouls_on_missed_threes %>% add_row(fouls_on_made_threes)

fouls_on_threes %>% group_by(PLAYER1_NAME.x) %>% 
  summarize(count=n()) %>% ungroup() %>% slice_max(count,n=10) %>% gt()
```

## The "I'll Have It to Go" Award (sponsored by DoorDash)

coach with lowest timeout utilization (credit to xfinityhomeboy, Ill_Ad3517 & s-sea (who also came up with the name))

```{r most_timeouts_left_over}
num_timeouts_available=pbp2024 %>% filter(!is.na(PLAYER1_TEAM_ABBREVIATION)) %>% group_by(GAME_ID,PERIOD,PLAYER1_TEAM_ABBREVIATION) %>% slice(1) %>% 
  select(GAME_ID,PERIOD,PLAYER1_TEAM_ABBREVIATION) %>% ungroup() %>%
  group_by(team=PLAYER1_TEAM_ABBREVIATION) %>% summarize(games=sum(PERIOD<=4)/4,overtimes=sum(PERIOD>4),num_timeouts=7*games+2*overtimes) %>%
  left_join(.,team_summaries %>% select(team,abbreviation) %>% 
                            mutate(
                              abbreviation=case_when(
                                abbreviation=="BRK"~"BKN",
                                abbreviation=="CHO"~"CHA",
                                abbreviation=="PHO"~"PHX",
                                TRUE~abbreviation)),
                          by=join_by(team==abbreviation)) %>%
  mutate(team_name=if_else(
    team=="POR",word(team.y,start=-2,end=-1),word(team.y,start=-1))) %>%
  select(-team.y)

num_timeouts_used=pbp2024 %>% 
  filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_detect(.,"Timeout"))) %>% 
  filter(if_any(c(HOMEDESCRIPTION,VISITORDESCRIPTION),
                ~str_detect(.,"Excess",negate=TRUE))) %>%
  select(GAME_ID,PERIOD,HOMEDESCRIPTION,VISITORDESCRIPTION) %>%
  pivot_longer(cols=HOMEDESCRIPTION:VISITORDESCRIPTION,
               values_to="timeout") %>%
  select(-name) %>% filter(!is.na(timeout)) %>%
  mutate(team_name=str_to_title(word(timeout,1,sep=" Timeout:"))) %>%
  group_by(team_name) %>% summarise(num_timeouts_used=n())

timeouts_used_percent=left_join(num_timeouts_available,
                                num_timeouts_used) %>% 
  mutate(timeout_use_percent=num_timeouts_used/num_timeouts) %>% arrange(desc(timeout_use_percent))

timeouts_used_percent %>% 
  select(team,num_timeouts,
         num_timeouts_used,timeout_use_percent) %>%
  slice_min(timeout_use_percent,n=5) %>%
  gt() %>%
  fmt_percent(columns=timeout_use_percent)
```

## The "I Gotta Coach AND Ref?" Award (presented by Ace Attorney Phoenix Wright)

Best success rate on challenges (credit to xfinityhomeboy & sleepyfox1312 for the idea, from <https://official.nba.com/2023-24-nba-coachs-challenge-reviews/>)

```{r challenges}
nba_bow=bow("https://official.nba.com/",user_agent = "Sumitro Datta",force=TRUE,delay=10)
session=nod(nba_bow,path="2023-24-nba-coachs-challenge-reviews/")

coaches_challenge_by_day=scrape(session) %>% 
  html_nodes("a") %>% html_attr("href") %>% tibble() %>%
  rename(links=".") %>%
  distinct(links) %>%
  filter(str_detect(links,"Coachs-challenges")) %>% slice(1) %>% pull()

challenge_tables=extract_tables(file=coaches_challenge_by_day)

all_challenges=challenge_tables[[1]] %>% as_tibble(.name_repair = "minimal") %>% row_to_names(1) %>% clean_names()

for (x in 2:length(challenge_tables)){
  new_table=challenge_tables[[x]] %>% as_tibble(.name_repair = "minimal") %>% row_to_names(1) %>% clean_names()
  all_challenges=bind_rows(all_challenges,new_table)
}

all_challenges %>% group_by(team_challenged) %>% 
  summarize(num_challenges=n(),
            successful_challenges=sum(str_detect(challenge_outcome,"Successful"),
                                      na.rm = TRUE),
            success_rate=successful_challenges/num_challenges) %>% 
  arrange(desc(success_rate),desc(num_challenges)) %>% 
  slice_max(success_rate,n=5) %>% gt() %>%
  fmt_percent(columns=success_rate)
```

## The "Master Baiter" Award (sponsored by Bass Pro Shops & Kleenex)

highest rate of 3-point shooting fouls drawn as percent of total 3-point attempts (PBPStats.com) (credit to OhTheGrandeur for suggesting the change to a rate stat)

```{r master_baiter_scrape,results='hide'}
driver<- rsDriver(browser=c("firefox"),port=4444L)
remDr <- driver[["client"]]
remDr$open()
remDr$navigate("https://www.pbpstats.com/totals/nba/player?Season=2023-24&SeasonType=Regular%20Season&Type=Player&StatType=Totals&Table=FTs")
Sys.sleep(20)
a<-remDr$findElement(using="xpath",value='//*[contains(concat( " ", @class, " " ), concat( " ", "footer__row-count__select", " " ))]')
a$clickElement()
Sys.sleep(10)
a$clickElement()
b<-remDr$findElement(using="xpath",value=paste0("//*/option[@value = '500']"))
b$clickElement()

ft_source=read_html(remDr$getPageSource()[[1]]) %>% 
  html_nodes("table") %>% .[[1]] %>% html_table() %>% 
  select(-1) %>% rename_with(.fn=~word(.,1,sep="\n")) %>% slice(-1) %>% 
  clean_names() %>% mutate(x3pt_sfd_tot=x3pt_sfd+x3pt_and_1s)

remDr$close()
driver$server$stop()
```

```{r master_baiter_output}
rate_based_3pt_fouls_drawn=left_join(
  ft_source %>% select(name,x3pt_sfd,x3pt_and_1s,x3pt_sfd_tot),
  totals %>% select(seas_id:tm,x3p,x3pa) %>% 
    mutate(name_to_join=case_when(
      str_detect(player,"Xavier Tillman")~"Xavier Tillman",
      str_detect(player,"Marcus Morris")~"Marcus Morris Sr.",
      str_detect(player,"Kevin Knox")~"Kevin Knox II",
      str_detect(player,"Robert Williams")~"Robert Williams III",
      str_detect(player,"A.J. Green")~"AJ Green",
      str_detect(player,"Reggie Bullock")~"Reggie Bullock Jr.",
      str_detect(player,"Harry Giles")~"Harry Giles III",
      str_detect(player,"Gregory Jackson II")~"GG Jackson",
      str_detect(player,"Jermaine Samuels")~"Jermaine Samuels Jr.",
      str_detect(player,"Jeenathan")~"Nate Williams",
      TRUE~stringi::stri_trans_general(str=player,id="Latin-ASCII"))),
  by=c("name"="name_to_join")) %>% mutate(rate=x3pt_sfd_tot/x3pa)
  
rate_based_3pt_fouls_drawn %>% filter(x3p>=82) %>% slice_max(rate,n=5) %>% 
  select(name,tm,x3pt_sfd,x3pt_and_1s,x3pt_sfd_tot,x3pa,rate) %>% 
  gt() %>% fmt_percent(columns=rate)
```

## The Stonks Award

contract overperformance by fewest contract \$ per 1 VORP (credit to memeticengineering for the idea)

```{r stonks_scrape,results='hide'}
contracts=tibble()
for (x in teams) {
  session=nod(bbref_bow,path=paste0("contracts/",x,".html"))
  teams_contracts=scrape(session) %>% 
    html_nodes(xpath='//*[(@id = "contracts")]') %>% 
    html_table() %>% .[[1]] %>% row_to_names(row_number=1) %>% clean_names() %>% 
    filter(age != "",x2023_24 != "") %>% 
    select(player,x2023_24) %>% rename(salary=x2023_24) %>% 
    mutate(salary=parse_number(salary),tm=x)
  contracts=bind_rows(contracts,teams_contracts)
  print(x)
}

salary_performance=left_join(contracts,
                             read_csv("Data/Advanced.csv") %>% 
                               filter(season==current_year)) %>% 
  select(player,tm,experience,age,salary,vorp) %>% 
  mutate(vorp_per_million=vorp/salary*1000000) %>% 
  mutate(percent_of_cap=salary/123655000) %>% filter(!is.na(vorp))
```

```{r stonks_output}
#remove any player with <=4 years of experience (rookie contract), players w/lower salary than min (10-days)
salary_performance %>% filter(experience > 4,salary>1017781) %>% 
  arrange(desc(vorp_per_million)) %>% 
  select(player,salary,vorp,vorp_per_million) %>% 
  slice_max(vorp_per_million,n=10) %>% gt() %>% 
  fmt_currency(columns=salary,use_subunits = FALSE) %>%
  fmt_number(columns=vorp_per_million,decimals = 4)
#remove players whose salary is less than 5% of cap
salary_performance %>% filter(experience > 4,percent_of_cap>0.05) %>% 
  arrange(desc(vorp_per_million)) %>% 
  select(player,salary,vorp,vorp_per_million,percent_of_cap) %>% 
  slice_max(vorp_per_million,n=10) %>% gt() %>% 
  fmt_currency(columns=salary,use_subunits = FALSE) %>%
  fmt_number(columns=vorp_per_million,decimals = 4) %>%
  fmt_percent(columns=percent_of_cap)

write_csv(salary_performance,"Output Data/Salary Overperformance.csv")
```

## The Rotation Awards

I value depth over one solitary star (it's a rotation after all). My attempt to make this more objective than past years:

-   Get position estimates from Basketball-Reference

    -   players with most minutes at PG & SG: guard

    -   players with most minutes at SG & SF or SF & PF: wing

    -   players with most minutes at PC & C: big

    -   exceptions: all players greater than 7 foot are bigs and all players less than 6 foot are guards

-   Rank teams based on highest positional VORP without positional VORP leader

```{r rotation_heights_scrape,results='hide'}
player_heights=tibble()
for (x in teams) {
  session=nod(bbref_bow,path=paste0("teams/",x,"/",current_year,".html"))
  team_heights=scrape(session) %>% html_nodes(css="#all_roster") %>% 
    html_table() %>% .[[1]] %>% 
    clean_names() %>% select(player:wt)
  player_heights=bind_rows(player_heights,team_heights)
  print(x)
}

final_heights=player_heights %>% 
  mutate(player=str_trim(word(player,sep="\\(TW\\)"))) %>%
  separate(ht,into=c("ht_ft","ht_in"),convert=TRUE) %>% 
  mutate(full_in_ht=12*ht_ft+ht_in)

```

```{r final_rotation_awards,eval=TRUE}
pos_percents_w_heights=play_by_play %>% 
  select(seas_id:player,pos,tm:c_percent) %>% filter(tm!="TOT") %>% 
  replace_na(list(pg_percent=0,sg_percent=0,sf_percent=0,
                  pf_percent=0,c_percent=0)) %>%
  mutate(guard_percent=pg_percent+sg_percent,
         wing_small_percent=sg_percent+sf_percent,
         wing_big_percent=sf_percent+pf_percent,
         big_percent=pf_percent+c_percent) %>% 
  pivot_longer(cols=guard_percent:big_percent,names_to="position") %>%
  group_by(seas_id) %>% slice_max(value,n=1) %>% ungroup() %>% 
  left_join(.,final_heights %>% select(-pos)) %>% 
  mutate(position=case_when(
    full_in_ht>=84~"big_percent",
    full_in_ht<=72~"guard_percent", 
    TRUE~position)) %>%
  #combine wing sizes into one
    mutate(position_2=word(position,sep="_")) %>%
  left_join(
    .,
    read_csv("Data/Advanced.csv") %>% 
      filter(season==current_year, tm != "TOT") %>% 
      select(seas_id:player,ows:vorp)) %>% 
  #remove players who are both big & small wing
  group_by(player_id,tm,position_2) %>% slice(1) %>% ungroup()

#pos_percents_w_heights %>% filter(mp>50) %>% 
#  ggplot(aes(x=full_in_ht,fill=position)) + 
#  geom_bar() + dark_theme_grey()

vorp_leaders_by_team_pos=pos_percents_w_heights %>% 
            group_by(tm,position_2) %>% 
  slice_max(vorp,n=1,with_ties=FALSE) %>% 
  mutate(leader=TRUE) %>% ungroup() %>% select(seas_id:player,tm,position_2,vorp,leader)

pos_percents_w_leaders=left_join(pos_percents_w_heights,
          vorp_leaders_by_team_pos) %>% 
  replace_na(list(leader=FALSE)) %>% arrange(seas_id)

write_csv(pos_percents_w_leaders,
          "Output Data/Player Positions.csv")

team_pos_vorps_wo_leader=pos_percents_w_leaders %>% filter(!leader) %>% group_by(tm,position_2) %>% summarize(pos_vorp_wo_leader=sum(vorp)) %>% ungroup()

pos_vorps_w_rotations=pos_percents_w_leaders %>% 
  group_by(tm,position_2) %>% 
  arrange(desc(vorp)) %>%
  summarize(rotation=paste0(player,collapse=", ")) %>% 
  ungroup() %>% select(tm,position_2,rotation) %>% 
  left_join(.,team_pos_vorps_wo_leader) %>%
  left_join(.,teams_w_conf)

write_csv(pos_vorps_w_rotations,"Output Data/Rotations with Positional VORPS.csv")

pos_vorp_leader_filter<-function(position,conf){
  final_df<-pos_vorps_w_rotations %>% 
    filter(position_2==position,conference==conf) %>% 
    slice_max(pos_vorp_wo_leader,n=5) %>% 
    left_join(.,pos_percents_w_leaders %>% 
                select(tm,player,position_2,g,mp,vorp)) %>%
    arrange(desc(pos_vorp_wo_leader),desc(vorp)) %>%
    select(tm,player,g,mp,vorp,pos_vorp_wo_leader) %>% 
    group_by(tm,pos_vorp_wo_leader)
}
```

### The Best Guard Rotation Award (sponsored by Buckingham Palace)

East:

```{r east_guards}
pos_vorp_leader_filter("guard","East") %>% gt()
```

West:

```{r west_guards}
pos_vorp_leader_filter("guard","West") %>% gt()
```

### The Best Wing Rotation Award (co-sponsored by Lou Williams and Magic City)

East:

```{r east_wings}
pos_vorp_leader_filter("wing","East") %>% gt()
```

West:

```{r west_wings}
pos_vorp_leader_filter("wing","West") %>% gt()
```

### The Best Big Rotation Award (jointly sponsored by Tom Hanks, Cadbury and Sex and the City)

East:

```{r east_bigs}
pos_vorp_leader_filter("big","East") %>% gt()
```

West:

```{r west_bigs}
pos_vorp_leader_filter("big","West") %>% gt()
```

## 
